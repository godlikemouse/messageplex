{"version":3,"sources":["components/ApplicationSelector.jsx","components/ApplicationView.jsx","App.js","reportWebVitals.js","index.js"],"names":["ApplicationSelector","props","app","services","onClick","notifications","className","_","map","service","i","classnames","active","name","title","src","icon","defaultProps","apps","shell","window","require","ApplicationView","onNotificationChange","refs","React","createRef","onNewWindow","e","protocol","URL","url","preventDefault","openExternal","onTitleUpdated","get","find","s","notification","hasNotification","RegExp","toString","test","useEffect","each","ref","current","addEventListener","refsClone","cloneDeep","removeEventListener","hidden","autosize","remote","ipcRenderer","App","JSON","parse","getGlobal","useState","currentApp","setCurrentApp","setNotifications","trayNotification","reduce","acc","send","updatedNotifications","extend","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef6f3be9.chunk.js","sourcesContent":["import \"./ApplicationSelector.css\";\nimport _ from \"lodash\";\nimport classnames from \"classnames\";\n\nconst ApplicationSelector = props => {\n\n    const {\n        app,\n        services,\n        onClick,\n        notifications\n    } = props;\n\n    return (\n        <div className=\"application-selector\">\n        {\n            _.map(services, (service, i) =>\n                <div\n                    key={`application-${i}`}\n                    className={\n                        classnames(\"application\", {\n                            active: service.name === app.name\n                        })\n                    }\n                    title={service.name}\n                    onClick={() => onClick(service)}\n                >\n                    <img src={service.icon} className=\"service-icon\" />\n                    {\n                        notifications[service.name] ?\n                            <div className=\"notification\"/> :\n                            null\n                    }\n                </div>\n            )\n        }\n        </div>\n    )\n}\n\nApplicationSelector.defaultProps = {\n    apps: [],\n    onClick: app => {}\n}\n\nexport default ApplicationSelector;\n","import \"./ApplicationView.css\";\nimport _ from \"lodash\";\nimport classnames from \"classnames\";\nimport React, {useEffect} from \"react\";\nconst {shell} = window.require(\"electron\");\n\nconst ApplicationView = props => {\n\n    const {\n        app,\n        services,\n        onNotificationChange\n    } = props;\n\n    const refs = _.map(services, service => React.createRef());\n\n    const onNewWindow = e => {\n        const protocol = (new URL(e.url)).protocol;\n        if (protocol === \"http:\" || protocol === \"https:\") {\n            e.preventDefault();\n            shell.openExternal(e.url);\n            return false;\n        }\n    }\n\n    const onTitleUpdated = e => {\n\n        const title = _.get(e, \"title\");\n        const name = _.get(e, \"target.attributes['name'].value\");\n        const service = _.find(services, s => s.name === name);\n        const notification = _.get(service, \"notification\");\n\n        if(!notification)\n            return onNotificationChange(service, false);\n\n        const re = new RegExp(notification.toString(), \"g\");\n        const hasNotification = re.test(title);\n\n        onNotificationChange(service, hasNotification);\n    }\n\n    useEffect(() => {\n\n        _.each(refs, ref => {\n            ref.current.addEventListener(\"new-window\", onNewWindow);\n            ref.current.addEventListener(\"page-title-updated\", onTitleUpdated)\n        });\n\n        const refsClone = _.cloneDeep(refs);\n        return () => {\n            _.each(refsClone, ref => {\n                ref.current.removeEventListener(\"new-window\", onNewWindow);\n                ref.current.removeEventListener(\"page-title-updated\", onTitleUpdated);\n            });\n        }\n    });\n\n    return (\n        <>\n        {\n            _.map(services, (service, i) =>\n                <div\n                    className={\n                        classnames(\n                            \"application-view\",\n                            {\n                                hidden: app.name !== service.name\n                            }\n                        )\n                    }\n                    key={`service-${service.name}`}\n                >\n                    <webview\n                        className=\"application-webview\"\n                        src={service.url}\n                        name={service.name}\n                        autosize=\"on\"\n                        ref={refs[i]}\n                    ></webview>\n                </div>\n            )\n        }\n        </>\n    );\n\n}\n\nApplicationView.defaultProps = {\n    services: []\n}\n\nexport default ApplicationView;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport ApplicationSelector from \"./components/ApplicationSelector\";\nimport ApplicationView from \"./components/ApplicationView\";\nimport {useState, useEffect} from \"react\";\nimport _ from 'lodash';\nconst {remote, ipcRenderer} = window.require(\"electron\");\n\nfunction App() {\n\n    const services = JSON.parse(remote.getGlobal(\"services\")) || [{\n        name: \"GMail\",\n        url: \"https://mail.google.com\",\n        icon: \"https://mail.google.com/favicon.ico\",\n        notification: \"\\\\(\\\\d\\\\)\"\n    }];\n\n    const [currentApp, setCurrentApp] = useState(services[0]);\n    const [notifications, setNotifications] = useState({});\n\n    useEffect(() => {\n        const trayNotification = _.reduce(\n            notifications,\n            (acc, service) => acc || service != null,\n            false\n        );\n        ipcRenderer.send(\"tray-notification\", trayNotification);\n    }, [notifications]);\n\n    const onNotificationChange = (service, hasNotification) => {\n\n        if(\n            (hasNotification && notifications[service.name]) ||\n            (!hasNotification && !notifications[service.name])\n        ){\n            return;\n        }\n\n        const updatedNotifications = _.extend({}, notifications, {\n            [service.name]: hasNotification ? service : null\n        });\n\n        setNotifications(updatedNotifications);\n    }\n\n    return (\n        <div className=\"App\">\n            <ApplicationSelector\n                app={currentApp}\n                services={services}\n                onClick={app => setCurrentApp(app)}\n                notifications={notifications}\n            />\n            <ApplicationView\n                app={currentApp}\n                services={services}\n                onNotificationChange={(service, hasNotification) =>\n                    onNotificationChange(service, hasNotification)}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}